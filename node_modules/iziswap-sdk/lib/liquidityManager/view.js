"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchLiquiditiesOfAccount = exports.fetchLiquiditiesByTokenIds = exports.getPoolAddress = exports.getLiquidityManagerContract = void 0;
const utils_1 = require("../base/utils");
const abi_json_1 = __importDefault(require("./abi.json"));
const bignumber_js_1 = require("bignumber.js");
const base_1 = require("../base");
const decodeParams_1 = require("./library/decodeParams");
const funcs_1 = require("../pool/funcs");
const calc_1 = require("./calc");
const getLiquidityManagerContract = (address, web3) => {
    return (0, utils_1.getEVMContract)(abi_json_1.default, address, web3);
};
exports.getLiquidityManagerContract = getLiquidityManagerContract;
const getPoolAddress = (liquidityManagerContract, tokenA, tokenB, fee) => __awaiter(void 0, void 0, void 0, function* () {
    const poolAddress = yield liquidityManagerContract.methods.pool((0, base_1.getSwapTokenAddress)(tokenA), (0, base_1.getSwapTokenAddress)(tokenB), fee).call();
    return poolAddress;
});
exports.getPoolAddress = getPoolAddress;
const fetchLiquiditiesByTokenIds = (chain, web3, liquidityManagerContract, tokenIdList, tokenList) => __awaiter(void 0, void 0, void 0, function* () {
    // 3. get all liquidities data by tokenId list
    const liquidityMulticallData = tokenIdList.map(tokId => liquidityManagerContract.methods.liquidities(tokId).encodeABI());
    const refreshLiquidityMulticallData = tokenIdList.map(tokId => liquidityManagerContract.methods.decLiquidity(tokId, '0', '0', '0', '0xffffffff').encodeABI());
    const liquidityResult = yield liquidityManagerContract.methods.multicall([...refreshLiquidityMulticallData, ...liquidityMulticallData]).call();
    const liquidities = liquidityResult.slice(refreshLiquidityMulticallData.length, liquidityResult.length).map((l, i) => {
        const liquidityRaw = web3.eth.abi.decodeParameters(decodeParams_1.liquidityParams, l);
        const liquidity = {
            tokenId: tokenIdList[i],
            leftPoint: Number(liquidityRaw.leftPt),
            rightPoint: Number(liquidityRaw.rightPt),
            liquidity: liquidityRaw.liquidity.toString(),
            lastFeeScaleX_128: liquidityRaw.lastFeeScaleX_128.toString(),
            lastFeeScaleY_128: liquidityRaw.lastFeeScaleY_128.toString(),
            remainTokenX: liquidityRaw.remainTokenX.toString(),
            remainTokenY: liquidityRaw.remainTokenY.toString(),
            poolId: liquidityRaw.poolId.toString()
        };
        return liquidity;
    });
    // 4. get liquidity meta data by poolId
    const metaMulticallData = liquidities.map(({ poolId }) => liquidityManagerContract.methods.poolMetas(poolId).encodeABI());
    const metaResult = yield liquidityManagerContract.methods.multicall(metaMulticallData).call();
    for (let i = 0; i < metaResult.length; i++) {
        const m = metaResult[i];
        const poolMetaRaw = web3.eth.abi.decodeParameters(decodeParams_1.poolMetas, m);
        const tokenXAddress = poolMetaRaw.tokenX;
        const tokenYAddress = poolMetaRaw.tokenY;
        const fee = poolMetaRaw.fee;
        liquidities[i] = Object.assign(Object.assign({}, liquidities[i]), { fee });
        liquidities[i].tokenX = Object.assign({}, tokenList.find((e) => (0, base_1.getSwapTokenAddress)(e).toUpperCase() === tokenXAddress.toUpperCase()));
        liquidities[i].tokenY = Object.assign({}, tokenList.find((e) => (0, base_1.getSwapTokenAddress)(e).toUpperCase() === tokenYAddress.toUpperCase()));
        if (!liquidities[i].tokenX.symbol) {
            liquidities[i].tokenX = yield (0, base_1.fetchToken)(tokenXAddress, chain, web3);
        }
        if (!liquidities[i].tokenY.symbol) {
            liquidities[i].tokenY = yield (0, base_1.fetchToken)(tokenYAddress, chain, web3);
        }
    }
    // TODO set main data first, price later, same farm
    // 5. get pool address
    const poolAddressMulticallData = liquidities.map((l) => liquidityManagerContract.methods.pool((0, base_1.getSwapTokenAddress)(l.tokenX), (0, base_1.getSwapTokenAddress)(l.tokenY), l.fee).encodeABI());
    const poolAddressResult = yield liquidityManagerContract.methods.multicall(poolAddressMulticallData).call();
    const poolAddressList = poolAddressResult.map(r => String(web3.eth.abi.decodeParameter('address', r)));
    // 6. get current price from pool
    const stateResultList = yield (0, utils_1.parallelCollect)(...poolAddressList.map(poolAddr => (0, funcs_1.getPoolState)((0, funcs_1.getPoolContract)(poolAddr, web3))));
    stateResultList.forEach((value, i) => {
        const r = value;
        liquidities[i].poolAddress = poolAddressList[i];
        liquidities[i].state = r;
    });
    // 7. pure function calculate data
    for (const liquidity of liquidities) {
        const { amountX, amountY } = (0, calc_1.getLiquidityValue)(liquidity, liquidity.state);
        liquidity.amountX = amountX.toFixed(0);
        liquidity.amountY = amountY.toFixed(0);
    }
    return liquidities;
});
exports.fetchLiquiditiesByTokenIds = fetchLiquiditiesByTokenIds;
const fetchLiquiditiesOfAccount = (chain, web3, liquidityManagerContract, account, tokenList) => __awaiter(void 0, void 0, void 0, function* () {
    // 1. get total nft by account
    const tokenTotal = yield liquidityManagerContract.methods.balanceOf(account).call().then((balance) => Number(balance));
    if (tokenTotal <= 0) {
        return [];
    }
    // 2. get tokenId list by total nft
    const tokenIdMulticallData = [];
    for (let i = 0; i < tokenTotal; i++) {
        tokenIdMulticallData.push(liquidityManagerContract.methods.tokenOfOwnerByIndex(account, i.toString()).encodeABI());
    }
    const tokenIdListResult = yield liquidityManagerContract.methods.multicall(tokenIdMulticallData).call();
    const tokenIdList = tokenIdListResult.map((tokId) => new bignumber_js_1.BigNumber(tokId).toFixed(0));
    return yield (0, exports.fetchLiquiditiesByTokenIds)(chain, web3, liquidityManagerContract, tokenIdList, tokenList);
});
exports.fetchLiquiditiesOfAccount = fetchLiquiditiesOfAccount;
