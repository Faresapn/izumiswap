"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._calciZiLiquidityAmountX = exports._calciZiLiquidityAmountY = exports._getAmountXNoRound = exports._getAmountYNoRound = exports._liquidity2AmountXAtPoint = exports._getAmountX = exports._liquidity2AmountYAtPoint = exports._getAmountY = void 0;
const bignumber_js_1 = require("bignumber.js");
const _getAmountY = (liquidity, sqrtPriceL, sqrtPriceR, sqrtRate, upper) => {
    const numerator = sqrtPriceR - sqrtPriceL;
    const denominator = sqrtRate - 1;
    if (!upper) {
        const amount = new bignumber_js_1.BigNumber(liquidity.times(numerator).div(denominator).toFixed(0, 3));
        return amount;
    }
    else {
        const amount = new bignumber_js_1.BigNumber(liquidity.times(numerator).div(denominator).toFixed(0, 2));
        return amount;
    }
};
exports._getAmountY = _getAmountY;
const _liquidity2AmountYAtPoint = (liquidity, sqrtPrice, upper) => {
    const amountY = liquidity.times(sqrtPrice);
    if (!upper) {
        return new bignumber_js_1.BigNumber(amountY.toFixed(0, 3));
    }
    else {
        return new bignumber_js_1.BigNumber(amountY.toFixed(0, 2));
    }
};
exports._liquidity2AmountYAtPoint = _liquidity2AmountYAtPoint;
const _getAmountX = (liquidity, leftPt, rightPt, sqrtPriceR, sqrtRate, upper) => {
    const sqrtPricePrPc = Math.pow(sqrtRate, rightPt - leftPt + 1);
    const sqrtPricePrPd = Math.pow(sqrtRate, rightPt + 1);
    const numerator = sqrtPricePrPc - sqrtRate;
    const denominator = sqrtPricePrPd - sqrtPriceR;
    if (!upper) {
        const amount = new bignumber_js_1.BigNumber(liquidity.times(numerator).div(denominator).toFixed(0, 3));
        return amount;
    }
    else {
        const amount = new bignumber_js_1.BigNumber(liquidity.times(numerator).div(denominator).toFixed(0, 2));
        return amount;
    }
};
exports._getAmountX = _getAmountX;
const _liquidity2AmountXAtPoint = (liquidity, sqrtPrice, upper) => {
    const amountX = liquidity.div(sqrtPrice);
    if (!upper) {
        return new bignumber_js_1.BigNumber(amountX.toFixed(0, 3));
    }
    else {
        return new bignumber_js_1.BigNumber(amountX.toFixed(0, 2));
    }
};
exports._liquidity2AmountXAtPoint = _liquidity2AmountXAtPoint;
const _getAmountYNoRound = (liquidity, sqrtPriceL, sqrtPriceR, sqrtRate) => {
    const numerator = sqrtPriceR - sqrtPriceL;
    const denominator = sqrtRate - 1;
    const amount = liquidity.times(numerator).div(denominator);
    return amount;
};
exports._getAmountYNoRound = _getAmountYNoRound;
const _getAmountXNoRound = (liquidity, leftPt, rightPt, sqrtPriceR, sqrtRate) => {
    const sqrtPricePrPc = Math.pow(sqrtRate, rightPt - leftPt + 1);
    const sqrtPricePrPd = Math.pow(sqrtRate, rightPt + 1);
    const numerator = sqrtPricePrPc - sqrtRate;
    const denominator = sqrtPricePrPd - sqrtPriceR;
    const amount = liquidity.times(numerator).div(denominator);
    return amount;
};
exports._getAmountXNoRound = _getAmountXNoRound;
const _calciZiLiquidityAmountY = (amountX, leftPoint, rightPoint, currentPoint) => {
    // console.log(' -- calc amount of iZiSwapPool::tokenY');
    if (leftPoint > currentPoint) {
        // console.log(' -- no need to deposit iZiSwapPool::tokenY');
        return new bignumber_js_1.BigNumber(0);
    }
    if (rightPoint <= currentPoint) {
        // console.log(' -- no need to deposit iZiSwapPool::tokenX');
        return new bignumber_js_1.BigNumber(0);
    }
    const sqrtRate = Math.sqrt(1.0001);
    const sqrtPriceR = Math.pow(sqrtRate, rightPoint);
    const unitLiquidityAmountX = (0, exports._getAmountXNoRound)(new bignumber_js_1.BigNumber(1), currentPoint + 1, rightPoint, sqrtPriceR, sqrtRate);
    const liquidityFloat = amountX.div(unitLiquidityAmountX);
    const sqrtPriceL = Math.pow(sqrtRate, leftPoint);
    const sqrtPricecurrentPointA1 = Math.pow(sqrtRate, currentPoint + 1);
    const amountY = (0, exports._getAmountY)(liquidityFloat, sqrtPriceL, sqrtPricecurrentPointA1, sqrtRate, true);
    return amountY;
};
exports._calciZiLiquidityAmountY = _calciZiLiquidityAmountY;
const _calciZiLiquidityAmountX = (amountY, leftPoint, rightPoint, currentPoint) => {
    // console.log(' -- calc amount of iZiSwapPool::tokenX');
    if (rightPoint <= currentPoint) {
        // console.log(' -- no need to deposit iZiSwapPool::tokenX');
        return new bignumber_js_1.BigNumber(0);
    }
    if (leftPoint > currentPoint) {
        // console.log(' -- no need to deposit iZiSwapPool::tokenY');
        return new bignumber_js_1.BigNumber(0);
    }
    const sqrtRate = Math.sqrt(1.0001);
    const sqrtPriceL = Math.pow(sqrtRate, leftPoint);
    const sqrtPricecurrentPointA1 = Math.pow(sqrtRate, currentPoint + 1);
    const unitLiquidityAmountY = (0, exports._getAmountYNoRound)(new bignumber_js_1.BigNumber(1), sqrtPriceL, sqrtPricecurrentPointA1, sqrtRate);
    const liquidityFloat = amountY.div(unitLiquidityAmountY);
    const sqrtPriceR = Math.pow(sqrtRate, rightPoint);
    const amountX = (0, exports._getAmountX)(liquidityFloat, currentPoint + 1, rightPoint, sqrtPriceR, sqrtRate, true);
    return amountX;
};
exports._calciZiLiquidityAmountX = _calciZiLiquidityAmountX;
