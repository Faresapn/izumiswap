import { TokenInfoFormatted } from "../base/types";
import { Contract } from 'web3-eth-contract';
import Web3 from "web3";
export interface DagNode {
    preIdx?: number[];
    calling?: string;
    targetAddress?: string;
    getCallingAndTargetAddress?: () => {
        targetAddress: string;
        calling: string;
    };
    parseCallingResponse: (response: string) => void;
}
export declare enum SwapDirection {
    ExactIn = "ExactIn",
    ExactOut = "ExactOut"
}
export declare enum CallingProperty {
    Long = "long",
    Short = "short"
}
export interface Path {
    tokenChain: TokenInfoFormatted[];
    feeContractNumber: number[];
}
export interface PathQueryCalling {
    calling: string;
    targetAddress: string;
    callingProperty?: CallingProperty;
}
export interface PathQueryResult {
    amount: string;
    path: Path;
    noSufficientLiquidity: boolean;
    initDecimalPriceEndByStart: number;
    priceImpact: number;
    feesDecimal: number;
    feeRate: number;
}
export interface PathQuery {
    path: Path;
    pathQueryCalling?: PathQueryCalling;
    pathQueryResult?: PathQueryResult;
}
export interface PreQueryResult {
    lastChainId?: number;
    pathWithOutFee100: Path[];
    pathWithFee100: Path[];
    pool: Map<string, string>;
    poolPoint: Map<string, number>;
}
export declare const initiZiPreResult: (chainId: number) => PreQueryResult;
export interface PoolPair {
    tokenA: TokenInfoFormatted;
    tokenB: TokenInfoFormatted;
    feeContractNumber: number;
}
export interface PreQueryParams {
    chainId: number;
    web3: Web3;
    multicall: Contract;
    tokenIn: TokenInfoFormatted;
    tokenOut: TokenInfoFormatted;
    liquidityManagerAddress: string;
    poolBlackList: PoolPair[];
    midTokenList: TokenInfoFormatted[];
    supportFeeContractNumbers: number[];
    support001Pools: PoolPair[];
}
export interface PathQueryParams {
    chainId: number;
    quoterAddress: string;
    web3: Web3;
    multicall: Contract;
    tokenIn: TokenInfoFormatted;
    tokenOut: TokenInfoFormatted;
    direction: SwapDirection;
    amount: string;
    longBatchSize: number;
    shortBatchSize: number;
}
export interface SearchPathQueryParams {
    chainId: number;
    web3: Web3;
    multicall: Contract;
    tokenIn: TokenInfoFormatted;
    tokenOut: TokenInfoFormatted;
    liquidityManagerAddress: string;
    quoterAddress: string;
    poolBlackList: PoolPair[];
    midTokenList: TokenInfoFormatted[];
    supportFeeContractNumbers: number[];
    support001Pools: PoolPair[];
    direction: SwapDirection;
    amount: string;
    longBatchSize?: number;
    shortBatchSize?: number;
}
