"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchPathQuery = exports.pathQuery = exports.preQuery = void 0;
const controllers_1 = require("./controllers");
const types_1 = require("./types");
const preQuery = (preQueryParams, preQueryResult) => __awaiter(void 0, void 0, void 0, function* () {
    if (!preQueryResult) {
        preQueryResult = (0, types_1.initiZiPreResult)(preQueryParams.chainId);
    }
    return yield (0, controllers_1.doPreQuery)(preQueryParams, preQueryResult);
});
exports.preQuery = preQuery;
const pathQuery = (pathQueryParams, preQueryResult) => __awaiter(void 0, void 0, void 0, function* () {
    return yield (0, controllers_1.doPathQuery)(pathQueryParams, preQueryResult);
});
exports.pathQuery = pathQuery;
const searchPathQuery = (searchPathQueryParams, preQueryResult) => __awaiter(void 0, void 0, void 0, function* () {
    const preQueryParams = Object.assign({}, searchPathQueryParams);
    preQueryResult = yield (0, exports.preQuery)(preQueryParams, preQueryResult);
    const pathQueryParams = Object.assign({}, searchPathQueryParams);
    const pathQueryResult = yield (0, exports.pathQuery)(pathQueryParams, preQueryResult);
    return {
        preQueryResult,
        pathQueryResult
    };
});
exports.searchPathQuery = searchPathQuery;
