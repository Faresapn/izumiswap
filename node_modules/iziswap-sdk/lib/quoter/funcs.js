"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.quoterSwapChainWithExactOutput = exports.quoterSwapChainWithExactInput = exports.quoterSwapSingleWithExactOutput = exports.quoterSwapSingleWithExactInput = exports.getQuoterContract = void 0;
const base_1 = require("../base");
const utils_1 = require("../base/utils");
const abi_json_1 = __importDefault(require("./abi.json"));
const getQuoterContract = (address, web3) => {
    return (0, utils_1.getEVMContract)(abi_json_1.default, address, web3);
};
exports.getQuoterContract = getQuoterContract;
const quoterSwapSingleWithExactInput = (quoterContract, 
// account: string,
// chain: BaseChain,
params) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const isX2Y = (0, base_1.getSwapTokenAddress)(params.inputToken).toLowerCase() < (0, base_1.getSwapTokenAddress)(params.outputToken).toLowerCase();
    const boundaryPt = (_a = params.boundaryPt) !== null && _a !== void 0 ? _a : (isX2Y ? -799999 : 799999);
    if (isX2Y) {
        const { amountY, finalPoint } = yield quoterContract.methods.swapX2Y((0, base_1.getSwapTokenAddress)(params.inputToken), (0, base_1.getSwapTokenAddress)(params.outputToken), params.fee, params.inputAmount, boundaryPt).call();
        return {
            outputAmount: amountY.toString(),
            finalPoint: Number(finalPoint)
        };
    }
    else {
        const { amountX, finalPoint } = yield quoterContract.methods.swapY2X((0, base_1.getSwapTokenAddress)(params.outputToken), (0, base_1.getSwapTokenAddress)(params.inputToken), params.fee, params.inputAmount, boundaryPt).call();
        return {
            outputAmount: amountX.toString(),
            finalPoint: Number(finalPoint)
        };
    }
});
exports.quoterSwapSingleWithExactInput = quoterSwapSingleWithExactInput;
const quoterSwapSingleWithExactOutput = (quoterContract, 
// account: string,
// chain: BaseChain,
params) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    const isX2Y = (0, base_1.getSwapTokenAddress)(params.inputToken).toLowerCase() < (0, base_1.getSwapTokenAddress)(params.outputToken).toLowerCase();
    const boundaryPt = (_b = params.boundaryPt) !== null && _b !== void 0 ? _b : (isX2Y ? -799999 : 799999);
    if (isX2Y) {
        const { amountX, finalPoint } = yield quoterContract.methods.swapX2YDesireY((0, base_1.getSwapTokenAddress)(params.inputToken), (0, base_1.getSwapTokenAddress)(params.outputToken), params.fee, params.outputAmount, boundaryPt).call();
        return {
            inputAmount: amountX.toString(),
            finalPoint: Number(finalPoint)
        };
    }
    else {
        const { amountY, finalPoint } = yield quoterContract.methods.swapY2XDesireX((0, base_1.getSwapTokenAddress)(params.outputToken), (0, base_1.getSwapTokenAddress)(params.inputToken), params.fee, params.outputAmount, boundaryPt).call();
        return {
            inputAmount: amountY.toString(),
            finalPoint: Number(finalPoint)
        };
    }
});
exports.quoterSwapSingleWithExactOutput = quoterSwapSingleWithExactOutput;
const quoterSwapChainWithExactInput = (quoterContract, params) => __awaiter(void 0, void 0, void 0, function* () {
    const path = (0, utils_1.getTokenChainPath)(params.tokenChain, params.feeChain);
    const { acquire, pointAfterList } = yield quoterContract.methods.swapAmount(params.inputAmount, path).call();
    return {
        outputAmount: acquire.toString(),
        finalPoints: pointAfterList.map((e) => Number(e))
    };
});
exports.quoterSwapChainWithExactInput = quoterSwapChainWithExactInput;
const quoterSwapChainWithExactOutput = (quoterContract, params) => __awaiter(void 0, void 0, void 0, function* () {
    const path = (0, utils_1.getTokenChainPathReverse)(params.tokenChain, params.feeChain);
    const { cost, pointAfterList } = yield quoterContract.methods.swapDesire(params.outputAmount, path).call();
    const finalPoints = [];
    for (let i = pointAfterList.length - 1; i >= 0; i--) {
        finalPoints.push(Number(pointAfterList[i]));
    }
    return {
        inputAmount: cost.toString(),
        finalPoints
    };
});
exports.quoterSwapChainWithExactOutput = quoterSwapChainWithExactOutput;
