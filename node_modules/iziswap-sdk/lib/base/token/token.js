"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWrappedGasTokenIfExists = exports.getGasToken = exports.isWrappedGasToken = exports.isGasOrWrappedGasToken = exports.isGasToken = exports.getSwapTokenAddress = exports.fetchToken = exports.getContract = exports.getErc20TokenContract = exports.decimal2Amount = exports.amount2Decimal = void 0;
const types_1 = require("../types");
const bignumber_js_1 = require("bignumber.js");
// const memoizeOne = require('memoize-one')
const erc20_json_1 = __importDefault(require("./erc20.json"));
const amount2Decimal = (amount, token) => {
    return Number(amount.div(Math.pow(10, token.decimal)));
};
exports.amount2Decimal = amount2Decimal;
const decimal2Amount = (amountDecimal, token) => {
    return new bignumber_js_1.BigNumber(amountDecimal).times(Math.pow(10, token.decimal));
};
exports.decimal2Amount = decimal2Amount;
const getErc20TokenContract = (address, web3) => {
    return (0, exports.getContract)(erc20_json_1.default, address, web3);
};
exports.getErc20TokenContract = getErc20TokenContract;
const getContract = (abi, address, web3) => {
    return new web3.eth.Contract(abi, address, {});
};
exports.getContract = getContract;
// type getContractFn = <T>(abi: any, address: string, web3: Web3) => T
// TODO: memoize getContract fail
// const memoizedGetContract = memoizeOne(getContract) as getContractFn
// export const getErc20TokenContract = (
//     address: string,
//     web3: Web3
// ): Contract => {
//     return memoizedGetContract<Contract>(abi, address, web3)
// }
const fetchToken = (tokenAddr, chain, web3) => __awaiter(void 0, void 0, void 0, function* () {
    const contract = (0, exports.getContract)(erc20_json_1.default, tokenAddr, web3);
    const decimal = Number(yield contract.methods.decimals().call());
    const symbol = yield contract.methods.symbol().call();
    const name = yield contract.methods.name().call();
    const tokenInfo = {
        name,
        symbol,
        chainId: chain.id,
        decimal,
        icon: '/assets/tokens/default.svg',
        custom: true,
        address: tokenAddr
    };
    return tokenInfo;
});
exports.fetchToken = fetchToken;
const getSwapTokenAddress = (token) => {
    var _a;
    return (_a = token.wrapTokenAddress) !== null && _a !== void 0 ? _a : token.address;
};
exports.getSwapTokenAddress = getSwapTokenAddress;
const isGasToken = (token, chainId) => {
    var _a;
    if (!token || !chainId) {
        return false;
    }
    const chain = (0, types_1.getChain)(chainId);
    const chainTokenAddress = (_a = chain === null || chain === void 0 ? void 0 : chain.token.address) !== null && _a !== void 0 ? _a : '';
    if (token.chainId === chainId &&
        token.symbol === (chain === null || chain === void 0 ? void 0 : chain.tokenSymbol) &&
        token.address.toLowerCase() === chainTokenAddress.toLowerCase()) {
        return true;
    }
    return false;
};
exports.isGasToken = isGasToken;
const isGasOrWrappedGasToken = (token, chainId) => {
    var _a;
    if (!token || !chainId) {
        return false;
    }
    const chain = (0, types_1.getChain)(chainId);
    const chainTokenAddress = (_a = chain === null || chain === void 0 ? void 0 : chain.token.address) !== null && _a !== void 0 ? _a : '';
    if (token.chainId === chainId && token.address.toLowerCase() === chainTokenAddress.toLowerCase()) {
        return true;
    }
    return false;
};
exports.isGasOrWrappedGasToken = isGasOrWrappedGasToken;
const isWrappedGasToken = (token, chainId) => {
    var _a;
    if (!token || !chainId) {
        return false;
    }
    const chain = (0, types_1.getChain)(chainId);
    const chainTokenAddress = (_a = chain === null || chain === void 0 ? void 0 : chain.token.address) !== null && _a !== void 0 ? _a : '';
    if (token.chainId === chainId &&
        token.symbol !== (chain === null || chain === void 0 ? void 0 : chain.tokenSymbol) &&
        token.address.toLowerCase() === chainTokenAddress.toLowerCase()) {
        return true;
    }
    return false;
};
exports.isWrappedGasToken = isWrappedGasToken;
const getGasToken = (chainId) => {
    const chain = (0, types_1.getChain)(chainId);
    if (!!(chain === null || chain === void 0 ? void 0 : chain.token.address) && !!(chain === null || chain === void 0 ? void 0 : chain.token.symbol) && !!(chain === null || chain === void 0 ? void 0 : chain.token.decimal)) {
        return {
            chainId,
            address: chain === null || chain === void 0 ? void 0 : chain.token.address,
            symbol: chain === null || chain === void 0 ? void 0 : chain.token.symbol,
            decimal: chain === null || chain === void 0 ? void 0 : chain.token.decimal,
        };
    }
    return undefined;
};
exports.getGasToken = getGasToken;
const getWrappedGasTokenIfExists = (chainId) => {
    var _a, _b, _c;
    const chain = (0, types_1.getChain)(chainId);
    if (!!((_a = chain === null || chain === void 0 ? void 0 : chain.wrappedToken) === null || _a === void 0 ? void 0 : _a.address) && !!((_b = chain === null || chain === void 0 ? void 0 : chain.wrappedToken) === null || _b === void 0 ? void 0 : _b.symbol) && !!((_c = chain === null || chain === void 0 ? void 0 : chain.wrappedToken) === null || _c === void 0 ? void 0 : _c.decimal)) {
        return {
            chainId,
            address: chain === null || chain === void 0 ? void 0 : chain.wrappedToken.address,
            symbol: chain === null || chain === void 0 ? void 0 : chain.wrappedToken.symbol,
            decimal: chain === null || chain === void 0 ? void 0 : chain.wrappedToken.decimal,
        };
    }
    return undefined;
};
exports.getWrappedGasTokenIfExists = getWrappedGasTokenIfExists;
