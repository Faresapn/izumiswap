import { PriceRoundingType, TokenInfoFormatted } from "./types";
import { BigNumber } from 'bignumber.js';
/**
 * transform decimal price to undecimal price
 * @param tokenA tokenA info in format of [[`TokenInfoFormatted`]], only decimal field is needed
 * @param tokenB tokenB info in format of [[`TokenInfoFormatted`]], only decimal field is needed
 * @param priceDecimalAByB decimal-price how much tokenB (decimal amount) for 1 tokenA
 * @returns undecimal price
 */
export declare const priceDecimal2PriceUndecimal: (tokenA: TokenInfoFormatted, tokenB: TokenInfoFormatted, priceDecimalAByB: number) => BigNumber;
export declare const priceUndecimal2PriceDecimal: (tokenA: TokenInfoFormatted, tokenB: TokenInfoFormatted, priceUndecimalAByB: BigNumber) => number;
export declare const priceDecimal2Point: (tokenA: TokenInfoFormatted, tokenB: TokenInfoFormatted, priceDecimalAByB: number, roundingType: PriceRoundingType) => number;
export declare const priceUndecimal2Point: (tokenA: TokenInfoFormatted, tokenB: TokenInfoFormatted, priceUndecimalAByB: number, roundingType: PriceRoundingType) => number;
export declare const point2PoolPriceUndecimalSqrt: (point: number) => number;
export declare const point2PriceUndecimal: (tokenA: TokenInfoFormatted, tokenB: TokenInfoFormatted, point: number) => BigNumber;
export declare const getTokenXYFromToken: (tokenA: TokenInfoFormatted, tokenB: TokenInfoFormatted) => {
    tokenX: TokenInfoFormatted;
    tokenY: TokenInfoFormatted;
};
export declare const point2PriceDecimal: (tokenA: TokenInfoFormatted, tokenB: TokenInfoFormatted, point: number) => number;
export declare const pointDeltaRoundingUp: (point: number, pointDelta: number) => number;
export declare const pointDeltaRoundingDown: (point: number, pointDelta: number) => number;
