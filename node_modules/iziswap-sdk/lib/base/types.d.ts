export interface Dictionary<T> {
    [index: string]: T;
}
export interface TokenInfoFormatted {
    chainId: number;
    name?: string;
    symbol: string;
    icon?: string;
    address: string;
    wrapTokenAddress?: string;
    decimal: number;
    addTime?: Date;
    custom?: boolean;
}
export declare enum ChainId {
    None = -1,
    EthereumMainnet = 1,
    Optimism = 10,
    ZkSyncEra = 324,
    BSC = 56,
    ETC = 61,
    Aurora = 1313161554,
    Matic = 137,
    Arbitrum = 42161,
    Cronos = 25,
    Icplaza = 142857,
    ConfluxESpace = 1030,
    Meter = 82,
    Telos = 40,
    Ontology = 58,
    Ultron = 1231,
    Mantle = 5000,
    Base = 8453,
    Linea = 59144,
    Loot = 5151706,
    OpBNB = 204,
    Kroma = 255,
    Manta = 169,
    Scroll = 534352,
    ZKFair = 42766,
    Zeta = 7000,
    Merlin = 4200,
    Blast = 81457,
    ZklinkNova = 810180,
    Mode = 34443,
    XLayer = 196,
    BOB = 60808,
    Cyber = 7560,
    Taiko = 167000,
    Klaytn = 8217,
    Kava = 2222,
    Core = 1116,
    RootStock = 30,
    MAP = 22776,
    NEON = 245022934,
    Rinkeby = 4,
    Goerli = 5,
    BSCTestnet = 97,
    OntologyTestnet = 5851,
    MaticTestnet = 80001,
    AuroraTestnet = 1313161555,
    ZkSyncAlphaTest = 280,
    MantleTest = 5001,
    ScrollTestL2 = 534351,
    LineaTest = 59140,
    OpsideTestRollux = 12008,
    MantaTest = 3441005,
    StagingFastActiveBellatrix = 1351057110,
    KromaSepoliaTest = 2358,
    GasZeroGoerliL2 = 12021,
    ZetaTest = 7001,
    ZKFairTest = 43851,
    X1Test = 195,
    MumbaiTest = 80001,
    TaikoKatlaL2Test = 167008,
    MorphTest = 2710,
    BeraTest = 80085,
    MerlinTest = 686868,
    BlastSepoliaTest = 168587773,
    ZklinkNovaTest = 810182,
    ModeSepoliaTest = 919
}
export interface BaseChain {
    id: number;
    name: string;
    tokenSymbol: string;
    token: Partial<TokenInfoFormatted>;
    wrappedTokenSymbol: string;
    wrappedToken: Partial<TokenInfoFormatted>;
    scanUrl: string;
    scanName: string;
    vmType: string;
    rpcUrl: string;
    blockDelta?: number;
    blockDeltaU?: number;
}
export interface TransactionObject {
    from?: any;
    to?: any;
    value?: any;
    gas?: any;
    gasPrice?: any;
    type?: any;
    maxFeePerGas?: string | number;
    maxPriorityFeePerGas?: any;
    accessList?: any;
    data?: any;
    nonce?: any;
    chain?: any;
    hardfork?: any;
    common?: any;
}
export declare const initialChainTable: Dictionary<BaseChain>;
export declare const getChain: (chainId: ChainId) => BaseChain;
export declare enum PointRoundingType {
    POINT_ROUNDING_NEAREST = 0,
    POINT_ROUNDING_UP = 1,
    POINT_ROUNDING_DOWN = 2
}
export declare enum PriceRoundingType {
    PRICE_ROUNDING_NEAREST = 0,
    PRICE_ROUNDING_UP = 1,
    PRICE_ROUNDING_DOWN = 2
}
export declare const CHAIN_EIP1559_SET: Set<ChainId>;
export declare const buildSendingParams: (chain: BaseChain, params: TransactionObject, gasPrice: string | number) => TransactionObject;
