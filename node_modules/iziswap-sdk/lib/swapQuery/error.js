"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.swapQueryInvariant = exports.SwapQueryError = exports.SwapQueryErrCode = void 0;
const types_1 = require("../error/types");
var SwapQueryErrCode;
(function (SwapQueryErrCode) {
    SwapQueryErrCode["AMOUNT_ZERO_ERROR"] = "AMOUNT_ZERO_ERROR";
    SwapQueryErrCode["HIGHPT_NOT_GREATER_THAN_CURRENTPT_ERROR"] = "HIGHPT_NOT_GREATER_THAN_CURRENTPT_ERROR";
    SwapQueryErrCode["LOWPT_GREATER_THAN_CURRENTPT_ERROR"] = "LOWPT_GREATER_THAN_CURRENTPT_ERROR";
    SwapQueryErrCode["HIGHPT_OVER_ORDER_RANGE_ERROR"] = "HIGHPT_OVER_ORDER_RANGE_ERROR";
    SwapQueryErrCode["LOWPT_OVER_ORDER_RANGE_ERROR"] = "LOWPT_OVER_ORDER_RANGE_ERROR";
    SwapQueryErrCode["CURRENTPT_OVER_ORDER_RANGE_ERROR"] = "CURRENTPT_OVER_ORDER_RANGE_ERROR";
    SwapQueryErrCode["EXCEED_MAXUINT128_ERROR"] = "EXCEED_MAXUINT128_ERROR";
    SwapQueryErrCode["POINT_OVER_RANGE_ERROR"] = "POINT_OVER_RANGE_ERROR";
    SwapQueryErrCode["SQRTPRICE_OVER_RANGE_ERROR"] = "SQRTPRICE_OVER_RANGE_ERROR";
})(SwapQueryErrCode = exports.SwapQueryErrCode || (exports.SwapQueryErrCode = {}));
class SwapQueryError extends types_1.iZiSwapError {
    constructor(code, msg) {
        super(types_1.SDKModule.SWAP_QUERY, code, msg);
    }
}
exports.SwapQueryError = SwapQueryError;
const swapQueryInvariant = (cond, code, msg = '') => {
    if (!cond) {
        throw new SwapQueryError(code, msg);
    }
};
exports.swapQueryInvariant = swapQueryInvariant;
